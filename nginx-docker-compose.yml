version: '3.8'

services:
  # Nginx как reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl  # Для SSL сертификатов (опционально)
    depends_on:
      - spring-app
    networks:
      - app-network
    restart: unless-stopped

  # Spring Web приложение (Java 21)
  spring-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-web-app
    environment:
      - AAA=jdbc:postgresql://postgres:5432/dock_1
      #- SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/dock_1
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL-AUTO=update
      - SPRING_PROFILES_ACTIVE=prod
      - SERVER_TOMCAT_REMOTEIP_PROTOCOL_HEADER=X-Forwarded-Proto  # Для корректного определения протокола
      - SERVER_TOMCAT_REMOTEIP_REMOTE_IP_HEADER=X-Real-IP
    expose:
      - "8080"  # Только для внутренней сети
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL сервис
  postgres:
    image: postgres:16-alpine
    container_name: postgres-db
    environment:
      - POSTGRES_DB=dock_1
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dock_1"]
      interval: 25s
      timeout: 25s
      retries: 5
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge